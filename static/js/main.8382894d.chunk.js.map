{"version":3,"sources":["Header/Header.js","Navbar/Navbar.js","ApiWrapper/ApiWrapper.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","navBar","maxHeight","borderBottom","backgroundColor","headerTitle","height","width","textAlign","fontSize","fontFamily","Header","classes","Grid","container","xs","item","className","headerContainer","borderTop","fontWeight","color","Navbar","Typography","Link","Apiwrapper","state","isFetchingRecipe","strMeal","strThumb","titleSubString","strCategory","strArea","strTag","ingredientArray","measurementArray","randomRecipe","bind","this","fetchingRecipe","setState","fetch","method","headers","Accept","then","response","json","meals","strMealThumb","substring","strTags","strSource","trialMeal","console","clear","log","strIngredients","newStrIngredientsList","Object","keys","map","key","index","slice","filter","el","trim","strMeasurements","newStrMeasurementList","element","Container","props","rootContainer","spacing","gridContainer","gridOne","sm","lg","xl","Card","rootCard","CardHeader","avatar","Avatar","title","subheader","href","target","rel","CardMedia","media","image","CardContent","variant","component","IconButton","gridTwo","Button","onClick","endIcon","disabled","ingredientContainer","ingredientsList","measurementList","React","Component","withStyles","theme","maxWidth","paddingTop","margin","sourceLink","textDecoration","fontStyle","border","appContainer","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8382894d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n//import Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    navBar: {\r\n        maxHeight: '63px',\r\n        borderBottom: '1px solid black',\r\n        backgroundColor: 'pink'\r\n    },\r\n    headerTitle: {\r\n        height: '100%',\r\n        width: '100%',\r\n        textAlign: 'center',\r\n        //importborder: '1px solid red',\r\n        fontSize: '8.199121522693996vw',\r\n        fontFamily: \"'Style Script', cursive\",\r\n    },\r\n})\r\n\r\nfunction Header() {\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Grid container xs={12}>\r\n            <Grid item xs={12} className={ classes.headerTitle }>\r\n                Random Recipe\r\n            </Grid>\r\n            \r\n        </Grid>\r\n        \r\n    );\r\n\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport { Grid, Typography, Link } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n    headerContainer: {\r\n        borderTop: '1px solid black',\r\n        borderBottom: '1px solid black',\r\n\r\n    },\r\n    headerTitle: {\r\n        fontWeight: '600',\r\n        fontFamily: \"'Quicksand', sans-serif\",\r\n        color: 'black',\r\n    },\r\n})\r\n\r\nfunction Navbar () {\r\n    const classes = useStyles();\r\n    return (\r\n        <Grid className={classes.headerContainer} container xs={12}>\r\n            <Grid item xs={12}>\r\n                <Typography>\r\n                    <Link className={classes.headerTitle}>\r\n                        Home\r\n                    </Link>\r\n                </Typography>\r\n            </Grid>\r\n        </Grid>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default Navbar","import React from 'react';\r\nimport { withStyles, Container, Grid, Card, CardHeader, CardMedia, CardContent, Link, Typography, Button, IconButton, Avatar } from '@material-ui/core';\r\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\r\nimport LinkIcon from '@material-ui/icons/Link';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\n\r\n\r\nconst styles = theme => ({\r\n    rootContainer: {\r\n        //border: '1px solid black',\r\n        backgroundColor: '#fdf3f3',\r\n    },\r\n    gridContainer: {\r\n        //border: '1px dotted black',\r\n    },\r\n    rootCard: {\r\n        maxWidth: 345,\r\n    },\r\n    media: {\r\n        height: 0,\r\n        paddingTop: '56.25%', // 16:9\r\n        margin: '2px 20px',\r\n    },\r\n    avatar: {\r\n        backgroundColor: 'red',\r\n    }, \r\n    sourceLink: {\r\n        fontSize: '.8rem',\r\n        color: 'black',\r\n        textDecoration: 'none',\r\n        fontStyle: 'italic',\r\n    },\r\n    gridOne: {\r\n        //border: '1px solid blue',\r\n    },\r\n    gridTwo: {\r\n        //border: '1px solid black',\r\n        textAlign: 'center',\r\n    },\r\n    ingredientContainer: {\r\n        border: '1px dotted red',\r\n    },\r\n    ingredientsList: {\r\n       //  border: '1px solid yellow'\r\n    },\r\n    measurementList: {\r\n\r\n    },\r\n});\r\n\r\n\r\n\r\nclass Apiwrapper extends React.Component {\r\n    \r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            isFetchingRecipe: false,\r\n            strMeal: null,\r\n            strThumb: null,\r\n            titleSubString: null,\r\n            strCategory: null,\r\n            strArea: null,\r\n            strTag: null,\r\n            ingredientArray: [],\r\n            measurementArray: [],\r\n        };\r\n         this.randomRecipe = this.randomRecipe.bind(this);\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.fetchingRecipe ();\r\n    };\r\n\r\n    fetchingRecipe () {\r\n        this.setState ({isFetchingRecipe: true});\r\n        fetch ('https://www.themealdb.com/api/json/v1/1/random.php' , {\r\n            method : 'GET',\r\n            headers: {\r\n                Accept: 'application/json',\r\n            },\r\n        })\r\n        .then (response => response.json ())\r\n        .then (json => {\r\n                this.setState ({\r\n                strMeal: json.meals[0].strMeal,\r\n                isFetchingRecipe: false,\r\n                strThumb: json.meals[0].strMealThumb,\r\n                titleSubString: json.meals[0].strMeal.substring(0, 1),\r\n                strCategory: json.meals[0].strCategory,\r\n                strArea: json.meals[0].strArea,\r\n                strTags: json.meals[0].strTags,\r\n                strSource: json.meals[0].strSource,\r\n                ingredientArray: json.meals[0],\r\n                measurementArray: json.meals[0],\r\n            });\r\n\r\n                let trialMeal = json.meals[0];\r\n                console.clear();\r\n                console.log(trialMeal);\r\n            \r\n            \r\n        });\r\n    };\r\n\r\n    randomRecipe () {\r\n        this.fetchingRecipe();\r\n    }\r\n\r\n    \r\n    \r\n    render () {\r\n\r\n\r\n        //Map Ingredients\r\n        const strIngredients = this.state.ingredientArray;\r\n        const strIngredientsList = Object.keys(strIngredients)\r\n                                        .map(function(key, index) { return strIngredients[key] })\r\n                                        .slice(9,28);\r\n        const newStrIngredientsList = strIngredientsList.filter(function (el) { return el.trim(); })\r\n                                                        .map((item) => { return <li>{item}</li> });\r\n\r\n        //map Measurements\r\n        const strMeasurements = this.state.measurementArray;\r\n        const strMeasurementList = Object.keys(strMeasurements)\r\n                                        .map(function(key,index){ return strMeasurements[key] })\r\n                                        .slice(29, 48);\r\n\r\n        const newStrMeasurementList = strMeasurementList.filter(function (element) { return element.trim(); }).map((item) => <li>{item}</li>)\r\n\r\n        \r\n        return (\r\n            <Container className={this.props.classes.rootContainer} spacing={1}>\r\n                <Grid className={this.props.classes.gridContainer} container xs={12}>\r\n                    <Grid className={this.props.classes.gridOne} item xs={12} sm={6} lg={4} xl={4}>\r\n                        <Card className={this.props.classes.rootCard}>\r\n                            <CardHeader \r\n                                avatar={\r\n                                    <Avatar aria-label=\"recipe\" className={this.props.classes.avatar}>\r\n                                        {this.state.titleSubString}\r\n                                    </Avatar>\r\n                                }\r\n                                title={this.state.isFetchingRecipe? 'Loading Recipe...': this.state.strMeal}\r\n                                subheader={<Link href={this.state.strSource} \r\n                                target='_blank' \r\n                                rel='noreferrer'>\r\n                                <LinkIcon />\r\n                                    </Link> }\r\n                                />\r\n                            \r\n                            <CardMedia className={this.props.classes.media} image={this.state.strThumb} title='Random-recipe'/>\r\n\r\n                            <CardContent>\r\n                                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                    {this.state.isFetchingRecipe? 'Tags' : this.state.strTags + \" | \" + this.state.strCategory + \" | \" + this.state.strArea}\r\n                                </Typography>\r\n                            </CardContent>\r\n                            <IconButton aria-label=\"add to favorites\">\r\n                                <FavoriteBorderIcon />\r\n                            </IconButton>\r\n                            <IconButton aria-label=\"share\">\r\n                                <ShareIcon />\r\n                            </IconButton>\r\n                            \r\n                            \r\n                        </Card>\r\n                    </Grid>\r\n\r\n                    <Grid item className={this.props.classes.gridTwo}  xs={12} sm={6} lg={3} xl={3}>  \r\n                        <Button onClick={this.randomRecipe}\r\n                            endIcon={<AutorenewIcon />} \r\n                            className=\"myButton\" \r\n                            color=\"primary\" \r\n                            variant='contained'\r\n                            disabled={this.state.isFetchingRecipe}>\r\n                        Random Recipe\r\n                        </Button>\r\n                    </Grid>             \r\n                    <Grid container className={this.props.classes.ingredientContainer} xs={12} sm={6} lg={3} xl={3}>\r\n                        <Grid className={this.props.classes.ingredientsList} item xs={12}>\r\n                            <ul>{newStrIngredientsList}</ul>\r\n                        </Grid>\r\n                        <Grid className={this.props.classes.measurementList} item xs={12}>\r\n                            <ul>{newStrMeasurementList}</ul>\r\n                        </Grid>\r\n                    </Grid>\r\n                \r\n                </Grid>\r\n            </Container>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default withStyles(styles)(Apiwrapper)","import React from 'react'\nimport './App.css';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Container } from '@material-ui/core'\n\nimport Header from './Header/Header'\nimport Navbar from './Navbar/Navbar'\nimport Apiwrapper from './ApiWrapper/ApiWrapper'\n\nconst useStyles = makeStyles ({\n  appContainer: {\n\n  },\n})\n\nfunction App() {\n\n  const classes = useStyles();\n  return (\n    <Container className={classes.appContainer} maxWidth='md'>\n      <Header />\n      <Navbar />\n      <Apiwrapper />\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}